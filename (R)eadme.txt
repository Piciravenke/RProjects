- Komment jel: # (ez már nem fordul)
- Zárójelek használata érdemes a tisztább kód miatt!
- logikai kifejezések ugyanazok mint Java-ban (<,>,==,!=,>=,<=,&,|,!)
- különbséget tesz kis- és nagybetû között
- help() fgv-nyel keresés a manualban (help.start() - behozza magát a manualt!)
- objektumorientált! (még a function-ök is objektumok a function osztályból!)
- minden vektorban van tárolva alapból(még az elemek is)
- c fgv(combine röviden) segítségével hozhatunk létre vektort elemekből(bármilyen típusú is az)
- : operátorral számvektorokat tudunk létrehozni (pl 7:20 létrehoz egy vektort számokkal 7-20, 20:7 pedig 20-7 között)
- factor a vektorból olyan levels vectort hoz létre +-ba ami a vektor egyedi elemeit növekvő sorrendbe gyűjti ki
- legtöbb fgv vectorokon alkalmazható(általános fgvek: mean(),max(),min(),range(),length() stb.)
- vannak olyan fgv-ek amelyek a vektor összes elemére külön vannak hatással(pl: alapműveletek)
- recycle (vektor vektoron ha nem egyformák)
- fgv-eknek általában több argumentumuk van, melyeket hívásnál megadhatunk(nem kötelező ha van default érték)s
- fgvhívásnál az argumentumok nevei elhagyhatóak ha sorba adunk nekik értéket(ha megadjuk a nevüket akkor felcserélhetőek)
- adatelemzésnél fontos h a vektorok összes eleme helyett letudjam kérni csak a szükségeseket(subsets)
- subsetek létrehozhatóak logikai vektorral is
- az alvektorban az elemek sorrendje az eredeti vektor alapján van
- hiányzó adatok kezelése fontos (is.na() fgv használatával)!
- Lehet saját fgv-eket írni! (könyv 46. oldal)
- fgvírásnál adhatunk default értéket a paramétereknek!
- dátumfgv-ek vektorként való használata értékvektorokkal együtt( valójában nem vektorok, de használhatóak úgy!)
- csv fájl feldolgozása
- táblázatok készítése vektorokból a data.frame osztály segítségével
- résztáblákat lehet létrehozni vektorként(subset) $ operátorral (tábanév$oszlopnév)
- mivel vektorok ezek a subsetek bármilyen vektormetódus használható
- nem ábrázolt értékeket mindig át kell váltani NA-ra!!!
- (hasonlóan működik a tábla mint a 2 dimenziós mátrix)
- if használata feltételes utasításokhoz(teljesen hasonló a java-hoz)
- ifelse (lásd: 76 oldal könyv)
- for ciklus (pl: for(i in 1:5){} )
- apply fgv-ek használata ciklusok helyett adatok elemzésére (tapply, apply)
- adatok újraformázása szükséges szine mindig (reshape fgv-ek)
- aggregálás ddply használatával
- mátrixok(2d) és tömbök(3d)
- raster objektumok gyakorlatilag mátrixok vagy tömbök, extra földrajzi adatokkal
- vector layers újabb földrajzi objektum
- rgeos csomag fgv-ei fontosak!
